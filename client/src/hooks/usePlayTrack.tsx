import { useAppDispatch, useAppSelector } from "./redux.ts";
import { useKeycloak } from "@react-keycloak/web";
import {
    setSourceWithBuffer,
    setBufferLoading,
    setSourceHasMore,
    setPlaybackMode,
    addToPlaylist,
    insertNextInPlaylist,
    setPlaylist,
    setCurrentTrack,
    updateSourcePage,
    setBufferTracks,
    appendToPlaylist, playTrack,
} from "../store/reducers/PlayerSlice.ts";
import type { PlayerSource } from "../store/reducers/PlayerSlice.ts";
import { useEffect, useRef, useCallback } from "react";
import type {TrackSimpleDto} from "../models/DTO/track/TrackSimpleDto.ts";
import {fetchAuthorTracksPaged} from "../store/reducers/action-creators/player.ts";
import type {AlbumSimpleDto} from "../models/DTO/album/AlbumSimpleDto.ts";
import type {PlaylistDto} from "../models/PlaylistDto.ts";

let sharedFetchFn: ((page: number, size: number) => Promise<TrackSimpleDto[]>) | null = null;
let sharedFetchSource: { type: PlayerSource["type"]; id: string | number } | null = null;
const pendingPageRef = { current: null as number | null };

type PlayableEntity = TrackSimpleDto | AlbumSimpleDto | PlaylistDto;

export const usePlayTrack = () => {
    const dispatch = useAppDispatch();
    const { keycloak } = useKeycloak();
    const { playbackMode, source, playlist, currentTrackIndex, bufferTracks, isBufferLoading,active } =
        useAppSelector((state) => state.player);

    const currentFetchFnRef = useRef<((page: number, size: number) => Promise<TrackSimpleDto[]>) | null>(null);

    const requireAuth = () => {
        if (!keycloak.authenticated) {
            keycloak.login();
            return false;
        }
        return true;
    };

    const callWithTimeout = useCallback(<T,>(p: Promise<T>, ms = 10000): Promise<T> => {
        let timer: ReturnType<typeof setTimeout> | null = null;
        const timeout = new Promise<never>((_, rej) => {
            timer = setTimeout(() => rej(new Error(`fetch timeout ${ms}ms`)), ms);
        });
        return Promise.race([p, timeout]).finally(() => {
            if (timer !== null) {
                clearTimeout(timer);
            }
        }) as Promise<T>;
    }, []);

    const playSingle = (track: TrackSimpleDto, mode?: "replace" | "append" | "insertNext") => {
        if (!requireAuth()) return;

        const effectiveMode = mode || playbackMode;

        console.log('üéµ playSingle called:', {
            track: track.title,
            mode: effectiveMode,
            currentPlaylistLength: playlist.length,
            currentTrackIndex
        });

        switch (effectiveMode) {
            case "append":
                dispatch(addToPlaylist([track]));
                console.log('üéµ Track appended to playlist');
                break;
            case "insertNext":
                dispatch(insertNextInPlaylist([track]));
                console.log('üéµ Track inserted next');
                break;
            case "replace":
            default:
                dispatch(setPlaylist([track]));
                dispatch(setCurrentTrack(0));
                console.log('üéµ Playlist replaced with single track');
                break;
        }
    };

    const addTrackToQueue = (track: TrackSimpleDto) => {
        if (!requireAuth()) return;

        const isPlayerInitialized = active !== null;

        console.log('üéµ addTrackToQueue:', {
            track: track.title,
            isPlayerInitialized,
            currentActive: active?.title,
            playlistLength: playlist.length,
            sharedFetchFn: !!sharedFetchFn,
            sharedFetchSource: sharedFetchSource,
            currentSource: source
        });

        if (!isPlayerInitialized) {
            console.log('üéµ –ü–ª–µ–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
            dispatch(setPlaylist([track]));
            dispatch(playTrack());
        } else {
            console.log('üéµ –ü–ª–µ–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏');
            dispatch(appendToPlaylist([track]));

            if (source && (!sharedFetchSource || source.type !== sharedFetchSource.type || source.id !== sharedFetchSource.id)) {
                console.log('üéµ –û–±–Ω–æ–≤–ª—è–µ–º shared —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
                const restored = restoreSourceConnection();
                console.log('üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ addTrackToQueue:', restored);
            }
        }
    };

    const addAlbumToQueue = async (album: AlbumSimpleDto) => {
        if (!requireAuth()) return;

        console.log('üéµ addAlbumToQueue:', {
            album: album.title,
            tracksCount: album.tracks?.length || 0,
            isPlayerInitialized: active !== null
        });

        const albumTracks = album.tracks || [];

        if (albumTracks.length === 0) {
            console.warn('üéµ –ê–ª—å–±–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–∫–æ–≤');
            return;
        }

        console.log('üéµ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –∞–ª—å–±–æ–º–∞ –≤ –æ—á–µ—Ä–µ–¥—å:', albumTracks.length);

        if (!active) {
            console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞');
            dispatch(setPlaylist(albumTracks));
            dispatch(setCurrentTrack(0));
            dispatch(playTrack());
        } else {
            console.log('üéµ –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏');
            dispatch(appendToPlaylist(albumTracks));
            resetSharedState();
        }
    };

    const addPlaylistToQueue = async (playlist: PlaylistDto) => {
        if (!requireAuth()) return;

        console.log('üéµ addPlaylistToQueue:', {
            playlist: playlist.title,
            tracksCount: playlist.tracks?.length || 0,
            isPlayerInitialized: active !== null
        });

        const playlistTracks = playlist.tracks || [];

        if (playlistTracks.length === 0) {
            console.warn('üéµ –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–∫–æ–≤');
            return;
        }

        console.log('üéµ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å:', playlistTracks.length);

        if (!active) {
            console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞');
            dispatch(setPlaylist(playlistTracks));
            dispatch(setCurrentTrack(0));
            dispatch(playTrack());
        } else {
            console.log('üéµ –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏');
            dispatch(appendToPlaylist(playlistTracks));
            resetSharedState();
        }
    };

    const addToQueue = (entity: PlayableEntity, type: 'track' | 'album' | 'playlist' = 'track') => {
        if (!requireAuth()) return;

        switch (type) {
            case 'track':
                addTrackToQueue(entity as TrackSimpleDto);
                break;
            case 'album':
                addAlbumToQueue(entity as AlbumSimpleDto);
                break;
            case 'playlist':
                addPlaylistToQueue(entity as PlaylistDto);
                break;
            default:
                console.warn('üéµ Unknown entity type:', type);
        }
    };

    const playTrackList = (tracks: TrackSimpleDto[], startIndex: number = 0) => {
        if (!requireAuth()) return;

        dispatch(setPlaylist(tracks));
        dispatch(setCurrentTrack(startIndex));
    };

    const loadNextPageToBuffer = useCallback(
        async (
            sourceOverride?: PlayerSource,
            fetchFnOverride?: (page: number, size: number) => Promise<TrackSimpleDto[]>
        ): Promise<boolean> => {
            const actualSource = sourceOverride ?? source;
            const actualFetchFn = fetchFnOverride ?? sharedFetchFn;

            console.log('üéµ loadNextPageToBuffer –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
                actualSource: !!actualSource,
                actualFetchFn: !!actualFetchFn,
                sharedFetchSource,
                isBufferLoading,
                typesMatch: actualSource && sharedFetchSource
                    ? actualSource.type === sharedFetchSource.type && actualSource.id === sharedFetchSource.id
                    : false
            });

            if (
                !actualSource ||
                !actualFetchFn ||
                !sharedFetchSource ||
                actualSource.type !== sharedFetchSource.type ||
                actualSource.id !== sharedFetchSource.id ||
                isBufferLoading
            ) {
                console.log('üéµ loadNextPageToBuffer: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
                return false;
            }

            const nextPage = actualSource.page + 1;

            if (typeof actualSource.totalPages === "number" && nextPage >= actualSource.totalPages) {
                dispatch(setSourceHasMore(false));
                return false;
            }

            if (pendingPageRef.current === nextPage) {
                return false;
            }

            pendingPageRef.current = nextPage;
            dispatch(setBufferLoading(true));

            try {
                console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É', nextPage, '–¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞', actualSource.id);
                const newTracks = await callWithTimeout(actualFetchFn(nextPage, actualSource.size), 10000);

                if (Array.isArray(newTracks) && newTracks.length > 0) {
                    console.log('üéµ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç—Ä–µ–∫–∏ –¥–ª—è –±—É—Ñ–µ—Ä–∞:', newTracks.length);
                    dispatch(setBufferTracks(newTracks));
                    const hasMore =
                        typeof actualSource.totalPages === "number"
                            ? nextPage + 1 < actualSource.totalPages
                            : newTracks.length === actualSource.size;
                    dispatch(setSourceHasMore(hasMore));
                    return true;
                } else {
                    console.log('üéµ –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±—É—Ñ–µ—Ä');
                    dispatch(setSourceHasMore(false));
                    return false;
                }
            } catch (error) {
                console.error("üéµ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—É—Ñ–µ—Ä–∞:", error);
                dispatch(setSourceHasMore(false));
                return false;
            } finally {
                pendingPageRef.current = null;
                dispatch(setBufferLoading(false));
            }
        },
        [source, isBufferLoading, dispatch, callWithTimeout]
    );

    const appendBufferToPlaylist = useCallback((): boolean => {
        if (bufferTracks.length > 0) {
            dispatch(appendToPlaylist(bufferTracks));
            dispatch(setBufferTracks([]));
            dispatch(updateSourcePage());
            return true;
        }
        return false;
    }, [bufferTracks, dispatch]);

    const playWithBuffering = async (
        initialTracks: TrackSimpleDto[],
        sourceConfig: Omit<PlayerSource, "page" | "hasMore" | "totalPages"> & { name?: string; totalPages?: number },
        fetchPageFn: (page: number, size: number) => Promise<TrackSimpleDto[]>,
        startIndex: number = 0
    ) => {
        if (!requireAuth()) return;

        if (!sharedFetchFn || !sharedFetchSource ||
            sharedFetchSource.type !== sourceConfig.type ||
            sharedFetchSource.id !== sourceConfig.id) {

            currentFetchFnRef.current = fetchPageFn;
            sharedFetchFn = fetchPageFn;
            sharedFetchSource = { type: sourceConfig.type, id: sourceConfig.id };

            console.log('üéµ playWithBuffering: —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ sharedFetchFn –∏ sharedFetchSource', {
                type: sourceConfig.type,
                id: sourceConfig.id
            });
        }

        const newSource: PlayerSource = {
            ...sourceConfig,
            page: 0,
            hasMore: true,
            totalPages: sourceConfig.totalPages ?? Infinity,
        };

        console.log('üéµ playWithBuffering: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –±–µ–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –±—É—Ñ–µ—Ä–∞');

        dispatch(setSourceWithBuffer({ source: newSource, initialTracks, bufferTracks: [], startIndex }));
    };

    const restoreSourceConnection = useCallback(() => {
        if (!source) {
            console.log('üéµ restoreSourceConnection: source –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return false;
        }

        console.log('üéµ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º:', {
            sourceType: source.type,
            sourceId: source.id,
            currentSharedSource: sharedFetchSource
        });

        switch (source.type) {
            case "author":
            { const authorFetchFn = async (page: number, size: number) => {
                console.log('üéµ –í—ã–∑—ã–≤–∞–µ–º fetchAuthorTracksPaged –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', { authorId: source.id, page, size });
                const res = await fetchAuthorTracksPaged(source.id.toString(), page, size);
                console.log('üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∞:', { tracksCount: res.tracks.length });
                return res.tracks;
            };
                sharedFetchFn = authorFetchFn;
                sharedFetchSource = { type: source.type, id: source.id };
                currentFetchFnRef.current = authorFetchFn;
                console.log('üéµ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞', {
                    sourceType: source.type,
                    sourceId: source.id,
                    sharedFetchFn: !!sharedFetchFn,
                    sharedFetchSource
                });
                return true; }

            case "album":
                console.warn('üéµ –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∞–ª—å–±–æ–º–∞ - –Ω—É–∂–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è fetch —Ñ—É–Ω–∫—Ü–∏—è');
                return false;

            default:
                console.warn('üéµ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', source.type);
                return false;
        }
    }, [source]);

    const useAutoBuffer = () => {
        useEffect(() => {
            if (currentTrackIndex === -1 || playlist.length === 0) return;

            const tracksLeft = playlist.length - currentTrackIndex - 1;
            const BUFFER_AHEAD = 1;

            const isSourceMatching =
                source &&
                sharedFetchSource &&
                source.type === sharedFetchSource.type &&
                source.id === sharedFetchSource.id;

            if (source && (!sharedFetchSource || !isSourceMatching)) {
                console.log('üéµ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
                const restored = restoreSourceConnection();
                console.log('üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', restored);
            }

            const shouldLoadBuffer =
                tracksLeft <= BUFFER_AHEAD &&
                source?.hasMore &&
                !isBufferLoading &&
                bufferTracks.length === 0 &&
                sharedFetchFn &&
                sharedFetchSource &&
                isSourceMatching;

            const shouldAppendBuffer = tracksLeft === 0 && bufferTracks.length > 0;

            console.log('üéµ useAutoBuffer –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
                currentTrackIndex,
                playlistLength: playlist.length,
                tracksLeft,
                hasMore: source?.hasMore,
                isBufferLoading,
                bufferTracksCount: bufferTracks.length,
                shouldLoadBuffer,
                shouldAppendBuffer,
                sharedFetchFn: !!sharedFetchFn,
                sharedFetchSource: sharedFetchSource,
                isSourceMatching,
                sourceType: source?.type,
                sharedSourceType: sharedFetchSource?.type,
                sourceId: source?.id,
                sharedSourceId: sharedFetchSource?.id
            });

            if (shouldLoadBuffer) {
                console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—É—Ñ–µ—Ä (–æ—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–µ–∫–æ–≤:', tracksLeft, ')');
                void loadNextPageToBuffer();
            }

            if (shouldAppendBuffer) {
                console.log('üéµ –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –≤ –ø–ª–µ–π–ª–∏—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫)');
                const appended = appendBufferToPlaylist();
                if (appended && source?.hasMore) {
                    console.log('üéµ –ë—É—Ñ–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                    setTimeout(() => {
                        void loadNextPageToBuffer();
                    }, 300);
                }
            }
        }, [
            currentTrackIndex,
            playlist.length,
            bufferTracks.length,
            source?.hasMore,
            isBufferLoading,
            loadNextPageToBuffer,
            appendBufferToPlaylist,
            restoreSourceConnection,
        ]);
    };

    const playAuthorPopularTracks = async (
        authorId: string,
        authorName: string,
        pageSize: number = 3
    ) => {
        if (!requireAuth()) return;

        console.log('üéµ –ù–∞—á–∞–ª–æ playAuthorPopularTracks –¥–ª—è –∞–≤—Ç–æ—Ä–∞:', authorId);

        try {
            console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–∫–æ–≤...');
            const firstPage = await fetchAuthorTracksPaged(authorId, 0, pageSize);

            console.log('üéµ –û—Ç–≤–µ—Ç –æ—Ç API:', firstPage);

            if (firstPage && Array.isArray(firstPage.tracks) && firstPage.tracks.length > 0) {
                console.log('üéµ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç—Ä–µ–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', firstPage.tracks.length);
                console.log('üéµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ë–ï–ó –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –±—É—Ñ–µ—Ä–∞');

                const fetchFn = async (page: number, size: number) => {
                    const res = await fetchAuthorTracksPaged(authorId, page, size);
                    return res.tracks;
                };

                currentFetchFnRef.current = fetchFn;
                sharedFetchFn = fetchFn;
                sharedFetchSource = { type: "author", id: authorId };

                await playWithBuffering(
                    firstPage.tracks,
                    {
                        type: "author",
                        id: authorId,
                        name: authorName,
                        size: pageSize,
                        totalPages: firstPage.totalPages
                    },
                    fetchFn
                );
            } else {
                console.warn('üéµ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∞', authorId);
            }
        } catch (e) {
            console.error('üéµ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤ –∞–≤—Ç–æ—Ä–∞:', e);
        }
    };

    const playAlbumTracks = async (
        albumId: number,
        albumName: string,
        fetchTracksFn: (page: number, size: number) => Promise<TrackSimpleDto[]>,
        initialTracks: TrackSimpleDto[] = [],
        pageSize: number = 20
    ) => {
        if (!requireAuth()) return;

        if (initialTracks.length === 0) {
            initialTracks = await fetchTracksFn(0, pageSize);
        }
        await playWithBuffering(initialTracks, { type: "album", id: albumId, name: albumName, size: pageSize }, fetchTracksFn);
    };

    useEffect(() => {
        return () => {
            if (currentFetchFnRef.current && sharedFetchFn === currentFetchFnRef.current) {
                sharedFetchFn = null;
                sharedFetchSource = null;
            }
            currentFetchFnRef.current = null;
        };
    }, []);

    const resetSharedState = useCallback(() => {
        sharedFetchFn = null;
        sharedFetchSource = null;
        currentFetchFnRef.current = null;
    }, []);

    const updateSharedState = useCallback((
        fetchFn: (page: number, size: number) => Promise<TrackSimpleDto[]>,
        sourceType: PlayerSource["type"],
        sourceId: string | number
    ) => {
        sharedFetchFn = fetchFn;
        sharedFetchSource = { type: sourceType, id: sourceId };
        currentFetchFnRef.current = fetchFn;
        console.log('üéµ Shared state updated:', { type: sourceType, id: sourceId });
    }, []);

    return {
        playSingle,
        addToQueue,
        playTrackList,
        playWithBuffering,
        loadNextPageToBuffer,
        appendBufferToPlaylist,
        playAuthorPopularTracks,
        playAlbumTracks,
        useAutoBuffer,
        resetSharedState,
        updateSharedState,
        restoreSourceConnection,
        setPlaybackMode: (mode: "replace" | "append") => dispatch(setPlaybackMode(mode)),
        currentMode: playbackMode,
        bufferState: { tracksCount: bufferTracks.length, isLoading: isBufferLoading, hasMore: source?.hasMore },
    };
};